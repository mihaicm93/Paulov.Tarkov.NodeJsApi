/**
 * The www is designed so that the app can be deployed to Containers like Azure Web Service
 * The app will listen on both http (80) and https (443) with a self-signed generated certificate
 */

/**
 * Module dependencies.
 */


const http = require('http');
const https = require('https');
const { certificate } = require('./../certGenerator');
const ws = require('ws');
const { WebSocketService } = require('./../services/WebSocketService');
require('dotenv').config()

const app = require('../app');
const appHttps = require('../app');

const localPortHttp = 80;
const localPortHttps = 443;

/**
 * Create HTTP server.
 */
var httpServer = http.createServer(app);
var portHttp = normalizePort(process.env.PORT || localPortHttp);
app.set('port', portHttp);
httpServer.on('error', onError);
httpServer.on('listening', () => {
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    console.log(`onListening: ${bind}`);
});
httpServer.listen(portHttp)


// try {

//   if (portHttp == localPortHttp) {
    const certs = certificate.generate(null);
    /**
     * Create HTTPS server.
     */
    var httpsServer = https.createServer({
      key: certs.key,
      cert: certs.cert
    }, appHttps);
//     httpsServer.on('error', onError);
    httpsServer.on('listening', () => {
      var addr = httpsServer.address();
      var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
        console.log(`onListening: ${bind}`);
    });
//     httpsServer.on('connection', (stream) => {
//       console.log('someone connected!');
//     });
    httpsServer.listen(443);
//   }
// }
// catch (err) {
//   console.error(err);
// }


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/// ==========================================================
/// Web Socket Handling on both Servers

try {
  const wss = new ws.Server({ noServer: true });
  wss.on('connection', socket => {
    socket.on('message', message => console.log(message));
  });
  httpServer.on('upgrade', (request, socket, head) => {
    wss.handleUpgrade(request, socket, head, cb => {
      console.log("handleUpgrade: Upgrade WebSocket Http!");
      handleUpgrade(wss, request, socket, head, cb);
    });
  });
  const wss2 = new ws.Server({ noServer: true,  });
  httpsServer.on('upgrade', (request, socket, head) => {
    console.log("Upgrade WebSocket Https!");
    wss2.handleUpgrade(request, socket, head, cb => {
      console.log("Upgraded WebSocket Https!");
      handleUpgrade(wss2, request, socket, head, cb);
    });
  });
}
catch(err) {
  console.error(err);
}

/**
 * 
 * @param {ws.WebSocketServer} wsServer 
 * @param request 
 * @param unkSocket 
 * @param head 
 * @param {ws} callbackSocket
 * @returns 
 */
function handleUpgrade(wsServer, request, unkSocket, head, callbackSocket) {

  /**
   * @type {Array}
   */
  const splitUrl = request.url.substring(0, request.url.indexOf("?")).split("/");

  /**
   * @type {string}
   */
  const sessionId = splitUrl.at(1);
  console.log(`${sessionId} has connected to the Web Socket`)
  WebSocketService.connections[sessionId] = { socket: callbackSocket };

  wsServer.emit('connection', unkSocket, request);

  // Send Initial Ping
  WebSocketService.sendPing(sessionId);

  // Do Ping Notifications
  WebSocketService.startPingInterval(sessionId);

  wsServer.on("message", async (msg) => {
    console.log(`WebSocketHandler connected`);
    console.log(msg);
  });
}

