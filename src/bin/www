#!/usr/bin/env node

/**
 * The www is designed so that the app can be deployed to Containers like Azure Web Service
 * The app will listen on both http (80) and https (443) with a self-signed generated certificate
 */

/**
 * Module dependencies.
 */

const app = require('../app');
const appHttps = require('../app');
const debug = require('debug')('myexpressapp:server');
const http = require('http');
const https = require('https');
const { certificate } = require('./../certGenerator');
const ws = require('ws');

const certs = certificate.generate(null);

/**
 * Create HTTP server.
 */
var httpServer = http.createServer(app);
httpServer.on('error', onError);
httpServer.on('listening', onListening);

/**
 * Create HTTPS server.
 */
var httpsServer = https.createServer({
  key: certs.key,
  cert: certs.cert
}, appHttps);
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);

/**
 * Servers Listen
 */
httpServer.listen(process.env.PORT || 80)
httpsServer.listen(443)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = httpsServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



/// ==========================================================
/// Web Socket Handling on both Servers

const wsServer = new ws.Server({ noServer: true });
wsServer.on('connection', socket => {
  socket.on('message', message => console.log(message));
});
httpServer.on('upgrade', (request, socket, head) => {
  wsServer.handleUpgrade(request, socket, head, socket => {
    console.log("Upgrade WebSocket Https!");
    wsServer.emit('connection', socket, request);
    setInterval(()=>{ 
      socket.send(JSON.stringify({ type: "ping", eventId: "" }));
    }, 1000);
  });
});
httpsServer.on('upgrade', (request, socket, head) => {
  wsServer.handleUpgrade(request, socket, head, socket => {
    console.log("Upgrade WebSocket Https!");
    wsServer.emit('connection', socket, request);
    setInterval(()=>{ 
      socket.send(JSON.stringify({ type: "ping", eventId: "" }));
    }, 1000);
  });
});

